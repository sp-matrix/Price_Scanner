import xmlschema
from lxml import etree

# Load the schema
xsd_path = 'your_schema.xsd'
schema = xmlschema.XMLSchema(xsd_path)

# Helper to walk and customize generated data
def customize_data(data, schema_type):
    if isinstance(data, dict):
        for key, val in data.items():
            child_type = schema_type.attributes.get(key) or schema_type.elements.get(key)
            if child_type:
                data[key] = customize_data(val, child_type.type)
    elif isinstance(data, list):
        return [customize_data(item, schema_type) for item in data]
    elif hasattr(schema_type, 'facets'):
        # Apply enumerations or restrictions if available
        if 'enumeration' in schema_type.facets:
            return schema_type.facets['enumeration'][0].value  # pick first enum
        if 'pattern' in schema_type.facets:
            return 'pattern_sample'
        if 'minLength' in schema_type.facets:
            return 'x' * schema_type.facets['minLength'].value
    return data

# Get root element and generate example data
root_elem = schema.root_element
example_data = schema.create_example()
customized_data = customize_data(example_data, root_elem.type)

# Convert dict to XML
def dict_to_etree(d, root_tag):
    def _to_etree(elem, dct):
        for key, val in dct.items():
            if isinstance(val, dict):
                child = etree.SubElement(elem, key)
                _to_etree(child, val)
            elif isinstance(val, list):
                for item in val:
                    child = etree.SubElement(elem, key)
                    _to_etree(child, item)
            else:
                child = etree.SubElement(elem, key)
                child.text = str(val)
    root = etree.Element(root_tag)
    _to_etree(root, d)
    return root

root_xml = dict_to_etree(customized_data, root_elem.name)

# Pretty print and validate
xml_str = etree.tostring(root_xml, pretty_print=True, encoding='unicode')
print(xml_str)

# Validate XML
schema.validate(etree.fromstring(xml_str))
print("XML is valid against the XSD.")